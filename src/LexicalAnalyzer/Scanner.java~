// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/LexicalAnalyzer/Lexer.flex

//*****************************************
//  IMPORTS AND PACKAGES
//*****************************************
    package LexicalAnalyzer;
    import static LexicalAnalyzer.TokensEnum.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\1\22\0\1\1\1\4"+
    "\1\0\2\5\1\6\1\7\1\5\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\12\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\5\17\27\1\30\12\27"+
    "\1\31\1\32\1\33\1\34\1\35\1\5\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\27"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\27\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\6\0\1\3\33\0\1\5"+
    "\22\0\1\5\12\0\1\5\u0168\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\2\26\1\27"+
    "\1\4\1\30\1\31\1\4\21\26\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\0\1\43"+
    "\1\44\1\0\1\45\1\44\2\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\26\2\0\1\26\1\54\10\26\1\55"+
    "\12\26\1\56\26\26\1\57\3\0\1\44\1\0\1\26"+
    "\1\60\16\26\1\61\2\26\1\62\2\26\1\63\21\26"+
    "\1\64\2\26\1\65\2\26\1\0\1\66\1\0\3\26"+
    "\1\67\1\26\1\70\1\71\2\26\1\72\1\26\1\73"+
    "\1\74\3\26\1\75\14\26\1\76\4\26\1\77\1\26"+
    "\1\100\1\26\1\101\1\102\3\26\1\103\3\26\1\104"+
    "\1\105\6\26\1\106\1\107\2\26\1\110\15\26\1\111"+
    "\2\26\1\112\1\113\1\114\1\115\7\26\1\116\1\117"+
    "\1\26\1\120\6\26\1\121\1\122\2\26\1\123\1\124"+
    "\1\26\1\125\1\126\1\127\7\26\1\130\1\131\1\26"+
    "\1\132\1\133\1\134\1\135\2\26\1\136\1\26\1\137"+
    "\1\140\1\26\1\141\1\142\1\143\1\144\1\145\4\26"+
    "\1\146\1\26\1\147";

  private static int [] zzUnpackAction() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\72\0\72\0\350\0\72"+
    "\0\72\0\u0122\0\u015c\0\164\0\u0196\0\u01d0\0\u020a\0\u0244"+
    "\0\72\0\u027e\0\u02b8\0\u02f2\0\u032c\0\72\0\u0366\0\u03a0"+
    "\0\72\0\u03da\0\72\0\72\0\u0414\0\u044e\0\u0488\0\u04c2"+
    "\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692"+
    "\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\72\0\u0828"+
    "\0\72\0\72\0\72\0\72\0\72\0\72\0\72\0\u0862"+
    "\0\72\0\u01d0\0\u089c\0\72\0\u08d6\0\u0910\0\u094a\0\72"+
    "\0\72\0\72\0\72\0\72\0\u0984\0\u09be\0\u0414\0\u09f8"+
    "\0\u0366\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e"+
    "\0\u0bc8\0\u0366\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24"+
    "\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0366\0\u0e46\0\u0e80\0\u0eba"+
    "\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a"+
    "\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a"+
    "\0\u1294\0\u12ce\0\u1308\0\u0910\0\u1342\0\u137c\0\u13b6\0\u13f0"+
    "\0\u142a\0\u1464\0\u09be\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586"+
    "\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756"+
    "\0\u1790\0\u0366\0\u17ca\0\u1804\0\u0366\0\u183e\0\u1878\0\u18b2"+
    "\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82"+
    "\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52"+
    "\0\u1c8c\0\u0366\0\u1cc6\0\u1d00\0\u0366\0\u1d3a\0\u1d74\0\u1dae"+
    "\0\u142a\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u0366\0\u1ed0\0\u1f0a"+
    "\0\u1f44\0\u1f7e\0\u1fb8\0\u0366\0\u1ff2\0\u0366\0\u0366\0\u202c"+
    "\0\u2066\0\u20a0\0\u0366\0\u20da\0\u2114\0\u214e\0\u2188\0\u21c2"+
    "\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u0366"+
    "\0\u2392\0\u23cc\0\u2406\0\u2440\0\u0366\0\u247a\0\u0366\0\u24b4"+
    "\0\u0366\0\u0366\0\u24ee\0\u2528\0\u2562\0\72\0\u259c\0\u25d6"+
    "\0\u2610\0\u0366\0\u0366\0\u264a\0\u2684\0\u26be\0\u26f8\0\u2732"+
    "\0\u276c\0\u0366\0\u0366\0\u27a6\0\u27e0\0\u0366\0\u281a\0\u2854"+
    "\0\u288e\0\u28c8\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24"+
    "\0\u2a5e\0\u2a98\0\u2ad2\0\u0366\0\u2b0c\0\u2b46\0\u0366\0\u0366"+
    "\0\u0366\0\u0366\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2"+
    "\0\u2cdc\0\u0366\0\u0366\0\u2d16\0\u0366\0\u2d50\0\u2d8a\0\u2dc4"+
    "\0\u2dfe\0\u2e38\0\u2e72\0\u0366\0\u2eac\0\u2ee6\0\u2f20\0\u0366"+
    "\0\u0366\0\u2f5a\0\u0366\0\u0366\0\u0366\0\u2f94\0\u2fce\0\u3008"+
    "\0\u3042\0\u307c\0\u30b6\0\u30f0\0\u0366\0\u0366\0\u312a\0\u0366"+
    "\0\u0366\0\u0366\0\u0366\0\u3164\0\u319e\0\u0366\0\u31d8\0\u0366"+
    "\0\u0366\0\u3212\0\u0366\0\u0366\0\u0366\0\u0366\0\u0366\0\u324c"+
    "\0\u3286\0\u32c0\0\u32fa\0\u0366\0\u3334\0\u0366";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\27\1\44\1\45\2\27\1\46"+
    "\2\27\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\27\1\56\1\27\1\57\1\60\1\61\1\62\73\0"+
    "\2\3\11\0\1\3\101\0\1\63\54\0\1\64\74\0"+
    "\1\65\11\0\1\66\71\0\1\67\65\0\1\70\3\0"+
    "\1\71\65\0\1\72\63\0\1\73\11\0\1\74\63\0"+
    "\1\75\1\0\1\20\6\0\2\76\4\0\5\76\1\77"+
    "\23\76\1\0\1\76\24\0\1\5\72\0\1\100\1\101"+
    "\71\0\1\102\71\0\1\103\1\104\64\0\1\27\6\0"+
    "\2\27\4\0\31\27\1\0\1\27\22\0\1\27\6\0"+
    "\2\27\4\0\20\27\1\105\10\27\1\0\1\27\34\0"+
    "\1\106\57\0\1\107\6\0\2\76\4\0\31\76\1\0"+
    "\1\76\22\0\1\27\6\0\2\27\4\0\4\27\1\110"+
    "\14\27\1\111\7\27\1\0\1\27\22\0\1\27\6\0"+
    "\2\27\4\0\1\27\1\112\14\27\1\113\1\27\1\114"+
    "\6\27\1\115\1\27\1\0\1\27\22\0\1\27\6\0"+
    "\2\27\4\0\1\27\1\116\14\27\1\117\12\27\1\0"+
    "\1\27\22\0\1\27\6\0\2\27\4\0\1\27\1\120"+
    "\3\27\1\121\10\27\1\122\12\27\1\0\1\27\22\0"+
    "\1\27\6\0\2\27\4\0\13\27\1\123\1\27\1\124"+
    "\4\27\1\125\6\27\1\0\1\27\22\0\1\27\6\0"+
    "\2\27\4\0\1\27\1\126\7\27\1\127\4\27\1\130"+
    "\1\27\1\131\2\27\1\132\5\27\1\0\1\27\22\0"+
    "\1\27\6\0\2\27\4\0\5\27\1\133\10\27\1\134"+
    "\12\27\1\0\1\27\22\0\1\27\6\0\2\27\4\0"+
    "\6\27\1\135\5\27\1\136\1\137\13\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\1\27\1\140\7\27"+
    "\1\141\4\27\1\142\12\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\1\27\1\143\16\27\1\144\2\27"+
    "\1\145\5\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\5\27\1\146\23\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\5\27\1\147\10\27\1\150\3\27"+
    "\1\151\5\27\1\152\1\0\1\27\22\0\1\27\6\0"+
    "\2\27\4\0\10\27\1\153\7\27\1\154\10\27\1\0"+
    "\1\27\22\0\1\27\6\0\2\27\4\0\6\27\1\155"+
    "\2\27\1\156\17\27\1\0\1\27\22\0\1\27\6\0"+
    "\2\27\4\0\1\27\1\157\7\27\1\160\17\27\1\0"+
    "\1\27\22\0\1\27\6\0\2\27\4\0\5\27\1\161"+
    "\2\27\1\162\20\27\1\0\1\27\22\0\1\27\6\0"+
    "\2\27\4\0\5\27\1\163\23\27\1\0\1\27\22\0"+
    "\1\107\6\0\2\76\4\0\31\76\1\0\1\164\20\0"+
    "\1\165\1\0\1\70\21\0\1\166\41\0\1\167\77\0"+
    "\1\170\71\0\1\76\6\0\2\76\4\0\31\76\1\0"+
    "\1\76\17\0\1\171\2\0\1\76\6\0\2\76\4\0"+
    "\31\76\1\0\1\76\22\0\1\27\6\0\2\27\4\0"+
    "\1\27\1\172\27\27\1\0\1\27\2\0\2\173\1\0"+
    "\27\173\1\0\37\173\20\0\1\27\6\0\2\27\4\0"+
    "\4\27\1\174\24\27\1\0\1\27\22\0\1\27\6\0"+
    "\2\27\4\0\13\27\1\175\15\27\1\0\1\27\22\0"+
    "\1\27\6\0\2\27\4\0\16\27\1\176\12\27\1\0"+
    "\1\27\22\0\1\27\6\0\2\27\4\0\5\27\1\177"+
    "\23\27\1\0\1\27\22\0\1\27\6\0\2\27\4\0"+
    "\22\27\1\200\6\27\1\0\1\27\22\0\1\27\6\0"+
    "\2\27\4\0\13\27\1\201\15\27\1\0\1\27\22\0"+
    "\1\27\6\0\2\27\4\0\15\27\1\202\13\27\1\0"+
    "\1\27\22\0\1\27\6\0\2\27\4\0\27\27\1\203"+
    "\1\27\1\0\1\27\22\0\1\27\6\0\2\27\4\0"+
    "\13\27\1\204\15\27\1\0\1\27\22\0\1\27\6\0"+
    "\2\27\4\0\21\27\1\205\7\27\1\0\1\27\22\0"+
    "\1\27\6\0\2\27\4\0\23\27\1\206\5\27\1\0"+
    "\1\27\22\0\1\27\6\0\2\27\4\0\10\27\1\207"+
    "\20\27\1\0\1\27\22\0\1\27\6\0\2\27\4\0"+
    "\13\27\1\210\15\27\1\0\1\27\22\0\1\27\6\0"+
    "\2\27\4\0\15\27\1\211\13\27\1\0\1\27\22\0"+
    "\1\27\6\0\2\27\4\0\20\27\1\212\10\27\1\0"+
    "\1\27\22\0\1\27\6\0\2\27\4\0\16\27\1\213"+
    "\12\27\1\0\1\27\22\0\1\27\6\0\2\27\4\0"+
    "\15\27\1\214\13\27\1\0\1\27\22\0\1\27\6\0"+
    "\2\27\4\0\26\27\1\215\2\27\1\0\1\27\22\0"+
    "\1\27\6\0\2\27\4\0\23\27\1\216\5\27\1\0"+
    "\1\27\22\0\1\27\6\0\2\27\4\0\17\27\1\217"+
    "\11\27\1\0\1\27\22\0\1\27\6\0\2\27\4\0"+
    "\22\27\1\220\6\27\1\0\1\27\22\0\1\27\6\0"+
    "\2\27\4\0\17\27\1\221\11\27\1\0\1\27\22\0"+
    "\1\27\6\0\2\27\4\0\15\27\1\222\13\27\1\0"+
    "\1\27\22\0\1\27\6\0\2\27\4\0\4\27\1\223"+
    "\24\27\1\0\1\27\22\0\1\27\6\0\2\27\4\0"+
    "\27\27\1\224\1\27\1\0\1\27\22\0\1\27\6\0"+
    "\2\27\4\0\11\27\1\225\17\27\1\0\1\27\22\0"+
    "\1\27\6\0\2\27\4\0\2\27\1\226\26\27\1\0"+
    "\1\27\22\0\1\27\6\0\2\27\4\0\22\27\1\227"+
    "\6\27\1\0\1\27\22\0\1\27\6\0\2\27\4\0"+
    "\3\27\1\230\11\27\1\231\13\27\1\0\1\27\22\0"+
    "\1\27\6\0\2\27\4\0\13\27\1\232\15\27\1\0"+
    "\1\27\22\0\1\27\6\0\2\27\4\0\20\27\1\233"+
    "\10\27\1\0\1\27\22\0\1\27\6\0\2\27\4\0"+
    "\1\27\1\234\27\27\1\0\1\27\22\0\1\27\6\0"+
    "\2\27\4\0\11\27\1\235\17\27\1\0\1\27\22\0"+
    "\1\27\6\0\2\27\4\0\1\27\1\236\21\27\1\237"+
    "\5\27\1\0\1\27\22\0\1\27\6\0\2\27\4\0"+
    "\11\27\1\240\17\27\1\0\1\27\22\0\1\27\6\0"+
    "\2\27\4\0\15\27\1\241\13\27\1\0\1\27\22\0"+
    "\1\27\6\0\2\27\4\0\20\27\1\242\10\27\1\0"+
    "\1\27\22\0\1\27\6\0\2\27\4\0\5\27\1\243"+
    "\23\27\1\0\1\27\22\0\1\27\6\0\2\27\4\0"+
    "\5\27\1\244\3\27\1\245\17\27\1\0\1\27\22\0"+
    "\1\27\6\0\2\27\4\0\11\27\1\246\17\27\1\0"+
    "\1\27\22\0\1\27\6\0\2\27\4\0\1\27\1\247"+
    "\27\27\1\0\1\27\22\0\1\250\66\0\1\171\2\0"+
    "\1\251\51\0\12\167\1\252\57\167\20\0\1\170\21\0"+
    "\1\166\47\0\1\251\71\0\1\27\6\0\2\27\4\0"+
    "\7\27\1\253\21\27\1\0\1\27\22\0\1\27\6\0"+
    "\2\27\4\0\20\27\1\254\10\27\1\0\1\27\22\0"+
    "\1\27\6\0\2\27\4\0\1\27\1\255\27\27\1\0"+
    "\1\27\22\0\1\27\6\0\2\27\4\0\13\27\1\256"+
    "\15\27\1\0\1\27\22\0\1\27\6\0\2\27\4\0"+
    "\1\27\1\257\27\27\1\0\1\27\22\0\1\27\6\0"+
    "\2\27\4\0\5\27\1\260\23\27\1\0\1\27\22\0"+
    "\1\27\6\0\2\27\4\0\13\27\1\261\15\27\1\0"+
    "\1\27\22\0\1\27\6\0\2\27\4\0\21\27\1\262"+
    "\1\263\6\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\21\27\1\264\7\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\5\27\1\265\23\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\5\27\1\266\23\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\14\27"+
    "\1\267\14\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\5\27\1\270\23\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\21\27\1\271\7\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\15\27\1\272\13\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\14\27"+
    "\1\273\14\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\3\27\1\274\25\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\20\27\1\275\10\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\16\27\1\276\12\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\5\27"+
    "\1\277\23\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\17\27\1\300\11\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\23\27\1\301\5\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\11\27\1\302\17\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\1\27"+
    "\1\303\27\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\24\27\1\304\4\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\13\27\1\305\15\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\23\27\1\306\5\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\16\27"+
    "\1\307\12\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\4\27\1\310\24\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\11\27\1\311\17\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\11\27\1\312\11\27"+
    "\1\313\5\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\2\27\1\314\26\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\21\27\1\315\7\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\15\27\1\316\13\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\5\27"+
    "\1\317\23\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\26\27\1\320\2\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\22\27\1\321\6\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\25\27\1\322\3\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\12\27"+
    "\1\323\16\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\13\27\1\324\15\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\20\27\1\325\10\27\1\0\1\27"+
    "\22\0\1\250\21\0\1\166\27\0\12\167\1\252\4\167"+
    "\1\326\52\167\20\0\1\27\6\0\2\27\4\0\14\27"+
    "\1\327\14\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\5\27\1\330\23\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\15\27\1\331\13\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\12\27\1\332\16\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\21\27"+
    "\1\333\7\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\3\27\1\334\25\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\22\27\1\335\6\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\11\27\1\336\6\27"+
    "\1\337\10\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\7\27\1\340\12\27\1\341\6\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\20\27\1\342\10\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\5\27"+
    "\1\343\23\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\5\27\1\344\23\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\22\27\1\345\6\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\21\27\1\346\7\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\20\27"+
    "\1\347\10\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\20\27\1\350\10\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\11\27\1\351\17\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\22\27\1\352\6\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\6\27"+
    "\1\353\22\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\2\27\1\354\26\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\1\27\1\355\27\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\11\27\1\356\17\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\20\27"+
    "\1\357\10\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\15\27\1\360\13\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\4\27\1\361\24\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\15\27\1\362\13\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\3\27"+
    "\1\363\25\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\16\27\1\364\12\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\21\27\1\365\7\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\5\27\1\366\23\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\21\27"+
    "\1\367\7\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\5\27\1\370\23\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\21\27\1\371\7\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\1\27\1\372\27\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\21\27"+
    "\1\373\7\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\3\27\1\374\25\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\16\27\1\375\12\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\20\27\1\376\10\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\15\27"+
    "\1\377\13\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\1\27\1\u0100\27\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\1\27\1\u0101\27\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\5\27\1\u0102\23\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\27\27"+
    "\1\u0103\1\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\11\27\1\u0104\17\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\22\27\1\u0105\6\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\15\27\1\u0106\13\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\15\27"+
    "\1\u0107\13\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\5\27\1\u0108\23\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\11\27\1\u0109\17\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\13\27\1\u010a\15\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\22\27"+
    "\1\u010b\6\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\3\27\1\u010c\25\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\15\27\1\u010d\13\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\4\27\1\u010e\24\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\11\27"+
    "\1\u010f\17\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\7\27\1\u0110\21\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\22\27\1\u0111\6\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\6\27\1\u0112\22\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\4\27"+
    "\1\u0113\24\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\21\27\1\u0114\7\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\5\27\1\u0115\23\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\4\27\1\u0116\24\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\23\27"+
    "\1\u0117\5\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\23\27\1\u0118\5\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\3\27\1\u0119\25\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\22\27\1\u011a\6\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\16\27"+
    "\1\u011b\12\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\1\27\1\u011c\27\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\7\27\1\u011d\21\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\21\27\1\u011e\7\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\5\27"+
    "\1\u011f\23\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\5\27\1\u0120\23\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\5\27\1\u0121\23\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\21\27\1\u0122\7\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\21\27"+
    "\1\u0123\7\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\22\27\1\u0124\6\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\5\27\1\u0125\23\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\5\27\1\u0126\23\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\3\27"+
    "\1\u0127\25\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\5\27\1\u0128\23\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\22\27\1\u0129\6\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\5\27\1\u012a\23\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\15\27"+
    "\1\u012b\13\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\13\27\1\u012c\15\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\20\27\1\u012d\10\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\27\27\1\u012e\1\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\20\27"+
    "\1\u012f\10\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\22\27\1\u0130\6\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\3\27\1\u0131\25\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\16\27\1\u0132\12\27"+
    "\1\0\1\27\22\0\1\27\6\0\2\27\4\0\1\27"+
    "\1\u0133\27\27\1\0\1\27\22\0\1\27\6\0\2\27"+
    "\4\0\20\27\1\u0134\10\27\1\0\1\27\22\0\1\27"+
    "\6\0\2\27\4\0\13\27\1\u0135\15\27\1\0\1\27"+
    "\22\0\1\27\6\0\2\27\4\0\13\27\1\u0136\15\27"+
    "\1\0\1\27\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13166];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\1\1\2\11\7\1\1\11"+
    "\4\1\1\11\2\1\1\11\1\1\2\11\22\1\1\11"+
    "\1\1\7\11\1\0\1\11\1\1\1\0\1\11\3\1"+
    "\5\11\1\1\2\0\55\1\3\0\1\1\1\0\56\1"+
    "\1\0\1\1\1\0\53\1\1\11\140\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int line(){
        return yyline;
    }
    public int column(){
        return yycolumn;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public TokensEnum yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return UNIDENTIFIED_ERROR;
            }
            // fall through
          case 104: break;
          case 2:
            { /*IGNORE*/
            }
            // fall through
          case 105: break;
          case 3:
            { lexeme = yytext();return LOGICNEGATION;
            }
            // fall through
          case 106: break;
          case 4:
            { return INVALID_CHARACTER;
            }
            // fall through
          case 107: break;
          case 5:
            { lexeme = yytext();return MODULE;
            }
            // fall through
          case 108: break;
          case 6:
            { lexeme = yytext();return ARITMETICAND;
            }
            // fall through
          case 109: break;
          case 7:
            { lexeme = yytext();return LPAREN;
            }
            // fall through
          case 110: break;
          case 8:
            { lexeme = yytext();return RPAREN;
            }
            // fall through
          case 111: break;
          case 9:
            { lexeme = yytext();return MULTIPLICATION;
            }
            // fall through
          case 112: break;
          case 10:
            { lexeme = yytext();return SUM;
            }
            // fall through
          case 113: break;
          case 11:
            { lexeme = yytext();return COMMA;
            }
            // fall through
          case 114: break;
          case 12:
            { lexeme = yytext();return SUBSTRACTION;
            }
            // fall through
          case 115: break;
          case 13:
            { lexeme = yytext();return DOT;
            }
            // fall through
          case 116: break;
          case 14:
            { lexeme = yytext();return DIVISION;
            }
            // fall through
          case 117: break;
          case 15:
            { lexeme = yytext();return CONSINTEGER;
            }
            // fall through
          case 118: break;
          case 16:
            { lexeme = yytext();return COLON;
            }
            // fall through
          case 119: break;
          case 17:
            { lexeme = yytext();return SEMICOLON;
            }
            // fall through
          case 120: break;
          case 18:
            { lexeme = yytext();return ARITMETICLESSTHAN;
            }
            // fall through
          case 121: break;
          case 19:
            { lexeme = yytext();return EQUAL;
            }
            // fall through
          case 122: break;
          case 20:
            { lexeme = yytext();return ARITMETICGREATERTHAN;
            }
            // fall through
          case 123: break;
          case 21:
            { lexeme = yytext();return QUESTIONSIGN;
            }
            // fall through
          case 124: break;
          case 22:
            { lexeme = yytext();return ID;
            }
            // fall through
          case 125: break;
          case 23:
            { lexeme = yytext();return LBRACE;
            }
            // fall through
          case 126: break;
          case 24:
            { lexeme = yytext();return RBRACE;
            }
            // fall through
          case 127: break;
          case 25:
            { lexeme = yytext();return ARITMETICEXOR;
            }
            // fall through
          case 128: break;
          case 26:
            { lexeme = yytext();return LBRACKET;
            }
            // fall through
          case 129: break;
          case 27:
            { lexeme = yytext();return ARITMETICOR;
            }
            // fall through
          case 130: break;
          case 28:
            { lexeme = yytext();return RBRACKET;
            }
            // fall through
          case 131: break;
          case 29:
            { lexeme = yytext();return ARITMETICNEGATION;
            }
            // fall through
          case 132: break;
          case 30:
            { lexeme = yytext();return LOGICDISTINCT;
            }
            // fall through
          case 133: break;
          case 31:
            { lexeme = yytext();return LOGICAND;
            }
            // fall through
          case 134: break;
          case 32:
            { lexeme = yytext();return EXPONENTIATION;
            }
            // fall through
          case 135: break;
          case 33:
            { lexeme = yytext();return MULTIEQUAL;
            }
            // fall through
          case 136: break;
          case 34:
            { lexeme = yytext();return SUMEQUAL;
            }
            // fall through
          case 137: break;
          case 35:
            { lexeme = yytext();return SUBEQUAL;
            }
            // fall through
          case 138: break;
          case 36:
            { lexeme = yytext();return CONSREAL;
            }
            // fall through
          case 139: break;
          case 37:
            { lexeme = yytext();return DIVEQUAL;
            }
            // fall through
          case 140: break;
          case 38:
            { return INVALID_IDENTIFIER;
            }
            // fall through
          case 141: break;
          case 39:
            { lexeme = yytext();return SHIFTLEFT;
            }
            // fall through
          case 142: break;
          case 40:
            { lexeme = yytext();return ARITMETICLESSEQUALTHAN;
            }
            // fall through
          case 143: break;
          case 41:
            { lexeme = yytext();return ARITMETICEQUAL;
            }
            // fall through
          case 144: break;
          case 42:
            { lexeme = yytext();return ARITMETICGREATEREQUALTHAN;
            }
            // fall through
          case 145: break;
          case 43:
            { lexeme = yytext();return SHIFTRIGHT;
            }
            // fall through
          case 146: break;
          case 44:
            { lexeme = yytext();return AS;
            }
            // fall through
          case 147: break;
          case 45:
            { lexeme = yytext();return DO;
            }
            // fall through
          case 148: break;
          case 46:
            { lexeme = yytext();return IF;
            }
            // fall through
          case 149: break;
          case 47:
            { lexeme = yytext();return LOGICOR;
            }
            // fall through
          case 150: break;
          case 48:
            { lexeme = yytext();return SINGLECOMMENT;
            }
            // fall through
          case 151: break;
          case 49:
            { lexeme = yytext();return FOR;
            }
            // fall through
          case 152: break;
          case 50:
            { lexeme = yytext();return HEX;
            }
            // fall through
          case 153: break;
          case 51:
            { lexeme = yytext();return INT;
            }
            // fall through
          case 154: break;
          case 52:
            { lexeme = yytext();return VAR;
            }
            // fall through
          case 155: break;
          case 53:
            { lexeme = yytext();return WEI;
            }
            // fall through
          case 156: break;
          case 54:
            { lexeme = yytext();return CONSSCIENT;
            }
            // fall through
          case 157: break;
          case 55:
            { lexeme = yytext();return BOOL;
            }
            // fall through
          case 158: break;
          case 56:
            { lexeme = yytext();return BYTE;
            }
            // fall through
          case 159: break;
          case 57:
            { lexeme = yytext();return CALL;
            }
            // fall through
          case 160: break;
          case 58:
            { lexeme = yytext();return DAYS;
            }
            // fall through
          case 161: break;
          case 59:
            { lexeme = yytext();return ELSE;
            }
            // fall through
          case 162: break;
          case 60:
            { lexeme = yytext();return ENUM;
            }
            // fall through
          case 163: break;
          case 61:
            { lexeme = yytext();return FROM;
            }
            // fall through
          case 164: break;
          case 62:
            { lexeme = yytext();return SEND;
            }
            // fall through
          case 165: break;
          case 63:
            { lexeme = yytext();return THIS;
            }
            // fall through
          case 166: break;
          case 64:
            { lexeme = yytext();return TRUE;
            }
            // fall through
          case 167: break;
          case 65:
            { lexeme = yytext();return UINT;
            }
            // fall through
          case 168: break;
          case 66:
            { lexeme = yytext();return VIEW;
            }
            // fall through
          case 169: break;
          case 67:
            { lexeme = yytext();return MULTICOMMENT;
            }
            // fall through
          case 170: break;
          case 68:
            { lexeme = yytext();return BREAK;
            }
            // fall through
          case 171: break;
          case 69:
            { lexeme = yytext();return BYTES;
            }
            // fall through
          case 172: break;
          case 70:
            { lexeme = yytext();return ETHER;
            }
            // fall through
          case 173: break;
          case 71:
            { lexeme = yytext();return FALSE;
            }
            // fall through
          case 174: break;
          case 72:
            { lexeme = yytext();return HOURS;
            }
            // fall through
          case 175: break;
          case 73:
            { lexeme = yytext();return SZABO;
            }
            // fall through
          case 176: break;
          case 74:
            { lexeme = yytext();return WEEKS;
            }
            // fall through
          case 177: break;
          case 75:
            { lexeme = yytext();return WHILE;
            }
            // fall through
          case 178: break;
          case 76:
            { lexeme = yytext();return YEARS;
            }
            // fall through
          case 179: break;
          case 77:
            { lexeme = yytext();return PRAGMA;
            }
            // fall through
          case 180: break;
          case 78:
            { lexeme = yytext();return DELETE;
            }
            // fall through
          case 181: break;
          case 79:
            { lexeme = yytext();return FINNEY;
            }
            // fall through
          case 182: break;
          case 80:
            { lexeme = yytext();return IMPORT;
            }
            // fall through
          case 183: break;
          case 81:
            { lexeme = yytext();return PUBLIC;
            }
            // fall through
          case 184: break;
          case 82:
            { lexeme = yytext();return RETURN;
            }
            // fall through
          case 185: break;
          case 83:
            { lexeme = yytext();return STRING;
            }
            // fall through
          case 186: break;
          case 84:
            { lexeme = yytext();return STRUCT;
            }
            // fall through
          case 187: break;
          case 85:
            { lexeme = yytext();return UFIXED;
            }
            // fall through
          case 188: break;
          case 86:
            { lexeme = yytext();return ADDRESS;
            }
            // fall through
          case 189: break;
          case 87:
            { lexeme = yytext();return BALANCE;
            }
            // fall through
          case 190: break;
          case 88:
            { lexeme = yytext();return MAPPING;
            }
            // fall through
          case 191: break;
          case 89:
            { lexeme = yytext();return MINUTES;
            }
            // fall through
          case 192: break;
          case 90:
            { lexeme = yytext();return PAYABLE;
            }
            // fall through
          case 193: break;
          case 91:
            { lexeme = yytext();return PRIVATE;
            }
            // fall through
          case 194: break;
          case 92:
            { lexeme = yytext();return RETURNS;
            }
            // fall through
          case 195: break;
          case 93:
            { lexeme = yytext();return SECONDS;
            }
            // fall through
          case 196: break;
          case 94:
            { lexeme = yytext();return CALLCODE;
            }
            // fall through
          case 197: break;
          case 95:
            { lexeme = yytext();return CONTINUE;
            }
            // fall through
          case 198: break;
          case 96:
            { lexeme = yytext();return CONTRACT;
            }
            // fall through
          case 199: break;
          case 97:
            { lexeme = yytext();return FUNCTION;
            }
            // fall through
          case 200: break;
          case 98:
            { lexeme = yytext();return INTERNAL;
            }
            // fall through
          case 201: break;
          case 99:
            { lexeme = yytext();return MODIFIER;
            }
            // fall through
          case 202: break;
          case 100:
            { lexeme = yytext();return SOLIDITY;
            }
            // fall through
          case 203: break;
          case 101:
            { lexeme = yytext();return TRANSFER;
            }
            // fall through
          case 204: break;
          case 102:
            { lexeme = yytext();return CONSTRUCTOR;
            }
            // fall through
          case 205: break;
          case 103:
            { lexeme = yytext();return DELEGATECALL;
            }
            // fall through
          case 206: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
