// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/LexicalAnalyzer/Lexer.flex

//*****************************************
//  IMPORTS AND PACKAGES
//*****************************************
    package LexicalAnalyzer;
    import static LexicalAnalyzer.Tokens.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\1\22\0\1\1\1\4"+
    "\3\0\1\5\1\6\1\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\12\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\0\17\26\1\27\12\26\1\30"+
    "\1\31\1\32\1\33\1\34\1\0\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\26\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\26\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\6\0\1\3\u01a2\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\2\25\1\26\1\1"+
    "\1\27\1\30\21\25\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\0\1\42\1\43\1\0"+
    "\1\44\1\43\1\0\1\45\1\46\1\47\1\50\1\51"+
    "\2\25\1\0\1\25\1\52\10\25\1\53\12\25\1\54"+
    "\26\25\1\55\2\0\1\43\1\0\1\56\2\25\1\57"+
    "\16\25\1\60\2\25\1\61\2\25\1\62\21\25\1\63"+
    "\2\25\1\64\2\25\2\0\4\25\1\65\1\25\1\66"+
    "\1\67\2\25\1\70\1\25\1\71\1\72\3\25\1\73"+
    "\14\25\1\74\4\25\1\75\1\25\1\76\1\25\1\77"+
    "\1\100\3\25\1\101\4\25\1\102\1\103\6\25\1\104"+
    "\1\105\2\25\1\106\15\25\1\107\2\25\1\110\1\111"+
    "\1\112\1\25\1\113\7\25\1\114\1\115\1\25\1\116"+
    "\6\25\1\117\1\120\2\25\1\121\1\122\1\25\1\123"+
    "\1\25\1\124\1\125\7\25\1\126\1\127\1\25\1\130"+
    "\1\131\1\132\1\133\3\25\1\134\1\25\1\135\1\136"+
    "\1\25\1\137\1\140\1\141\1\142\1\143\7\25\1\144"+
    "\2\25\1\145\23\25";

  private static int [] zzUnpackAction() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\71\0\344\0\71\0\71"+
    "\0\u011d\0\u0156\0\162\0\u018f\0\u01c8\0\u0201\0\u023a\0\71"+
    "\0\71\0\u0273\0\u02ac\0\u02e5\0\71\0\u031e\0\u0357\0\71"+
    "\0\u0390\0\71\0\71\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675"+
    "\0\u06ae\0\u06e7\0\u0720\0\u0759\0\71\0\u0792\0\71\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\u07cb\0\71\0\u01c8"+
    "\0\u0804\0\71\0\u083d\0\u0876\0\71\0\71\0\71\0\71"+
    "\0\71\0\u08af\0\u08e8\0\u0921\0\u095a\0\u08af\0\u0993\0\u09cc"+
    "\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u08af\0\u0b5b"+
    "\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23"+
    "\0\u0d5c\0\u08af\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2"+
    "\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a"+
    "\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242"+
    "\0\71\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u1326\0\u135f\0\u1398"+
    "\0\u0921\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527"+
    "\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u135f"+
    "\0\u16ef\0\u1728\0\u135f\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845"+
    "\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d"+
    "\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u135f"+
    "\0\u1bd5\0\u1c0e\0\u135f\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b"+
    "\0\u1d64\0\u1d9d\0\u1dd6\0\u1d2b\0\u1e0f\0\u1e48\0\u1e81\0\u1eba"+
    "\0\u1ef3\0\u1d2b\0\u1f2c\0\u1d2b\0\u1d2b\0\u1f65\0\u1f9e\0\u1fd7"+
    "\0\u1d2b\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u2166"+
    "\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283\0\u1d2b\0\u22bc\0\u22f5"+
    "\0\u232e\0\u2367\0\u1d2b\0\u23a0\0\u1d2b\0\u23d9\0\u1d2b\0\u1d2b"+
    "\0\u2412\0\u244b\0\u2484\0\71\0\u24bd\0\u24f6\0\u252f\0\u2568"+
    "\0\u24bd\0\u24bd\0\u25a1\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be"+
    "\0\u24bd\0\u24bd\0\u26f7\0\u2730\0\u24bd\0\u2769\0\u27a2\0\u27db"+
    "\0\u2814\0\u284d\0\u2886\0\u28bf\0\u28f8\0\u2931\0\u296a\0\u29a3"+
    "\0\u29dc\0\u2a15\0\u24bd\0\u2a4e\0\u2a87\0\u24bd\0\u24bd\0\u24bd"+
    "\0\u2ac0\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16"+
    "\0\u2c4f\0\u2ac0\0\u2ac0\0\u2c88\0\u2ac0\0\u2cc1\0\u2cfa\0\u2d33"+
    "\0\u2d6c\0\u2da5\0\u2dde\0\u2ac0\0\u2e17\0\u2e50\0\u2e89\0\u2ac0"+
    "\0\u2ac0\0\u2ec2\0\u2ac0\0\u2efb\0\u2efb\0\u2efb\0\u2f34\0\u2f6d"+
    "\0\u2fa6\0\u2fdf\0\u3018\0\u3051\0\u308a\0\u2efb\0\u2efb\0\u30c3"+
    "\0\u2efb\0\u2efb\0\u2efb\0\u2efb\0\u30fc\0\u3135\0\u316e\0\u316e"+
    "\0\u31a7\0\u316e\0\u316e\0\u31e0\0\u316e\0\u316e\0\u316e\0\u316e"+
    "\0\u316e\0\u3219\0\u3252\0\u328b\0\u32c4\0\u32fd\0\u3336\0\u336f"+
    "\0\u336f\0\u33a8\0\u33e1\0\u33e1\0\u341a\0\u3453\0\u348c\0\u34c5"+
    "\0\u34fe\0\u3537\0\u3570\0\u35a9\0\u35e2\0\u361b\0\u3654\0\u368d"+
    "\0\u36c6\0\u36ff\0\u3738\0\u3771\0\u37aa\0\u37e3\0\71";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\2\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\26\1\42\1\43\2\26\1\44\2\26"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\26"+
    "\1\54\1\26\1\55\1\56\1\57\1\60\72\0\2\3"+
    "\10\0\1\3\100\0\1\61\53\0\1\62\73\0\1\63"+
    "\11\0\1\64\70\0\1\65\64\0\1\66\3\0\1\67"+
    "\64\0\1\70\62\0\1\71\11\0\1\72\62\0\1\73"+
    "\1\0\1\17\21\0\1\74\51\0\1\75\1\76\70\0"+
    "\1\77\70\0\1\100\1\101\63\0\1\102\6\0\2\102"+
    "\4\0\31\102\1\0\1\102\21\0\1\102\6\0\2\102"+
    "\4\0\20\102\1\103\10\102\1\0\1\102\33\0\1\104"+
    "\56\0\1\102\6\0\2\102\4\0\4\102\1\105\14\102"+
    "\1\106\7\102\1\0\1\102\21\0\1\102\6\0\2\102"+
    "\4\0\1\102\1\107\14\102\1\110\1\102\1\111\6\102"+
    "\1\112\1\102\1\0\1\102\21\0\1\102\6\0\2\102"+
    "\4\0\1\102\1\113\14\102\1\114\12\102\1\0\1\102"+
    "\21\0\1\102\6\0\2\102\4\0\1\102\1\115\3\102"+
    "\1\116\10\102\1\117\12\102\1\0\1\102\21\0\1\102"+
    "\6\0\2\102\4\0\13\102\1\120\1\102\1\121\4\102"+
    "\1\122\6\102\1\0\1\102\21\0\1\102\6\0\2\102"+
    "\4\0\1\102\1\123\7\102\1\124\4\102\1\125\1\102"+
    "\1\126\2\102\1\127\5\102\1\0\1\102\21\0\1\102"+
    "\6\0\2\102\4\0\5\102\1\130\10\102\1\131\12\102"+
    "\1\0\1\102\21\0\1\102\6\0\2\102\4\0\6\102"+
    "\1\132\5\102\1\133\1\134\13\102\1\0\1\102\21\0"+
    "\1\102\6\0\2\102\4\0\1\102\1\135\7\102\1\136"+
    "\4\102\1\137\12\102\1\0\1\102\21\0\1\102\6\0"+
    "\2\102\4\0\1\102\1\140\16\102\1\141\2\102\1\142"+
    "\5\102\1\0\1\102\21\0\1\102\6\0\2\102\4\0"+
    "\5\102\1\143\23\102\1\0\1\102\21\0\1\102\6\0"+
    "\2\102\4\0\5\102\1\144\10\102\1\145\3\102\1\146"+
    "\5\102\1\147\1\0\1\102\21\0\1\102\6\0\2\102"+
    "\4\0\10\102\1\150\7\102\1\151\10\102\1\0\1\102"+
    "\21\0\1\102\6\0\2\102\4\0\6\102\1\152\2\102"+
    "\1\153\17\102\1\0\1\102\21\0\1\102\6\0\2\102"+
    "\4\0\1\102\1\154\7\102\1\155\17\102\1\0\1\102"+
    "\21\0\1\102\6\0\2\102\4\0\5\102\1\156\2\102"+
    "\1\157\20\102\1\0\1\102\21\0\1\102\6\0\2\102"+
    "\4\0\5\102\1\160\23\102\1\0\1\102\70\0\1\161"+
    "\17\0\1\162\1\0\1\66\21\0\1\74\40\0\1\163"+
    "\76\0\1\164\65\0\1\165\2\0\1\166\70\0\1\167"+
    "\6\0\2\167\4\0\31\167\1\0\1\167\21\0\1\167"+
    "\6\0\2\167\4\0\1\167\1\170\27\167\1\0\1\167"+
    "\2\0\2\171\1\0\26\171\1\0\37\171\17\0\1\167"+
    "\6\0\2\167\4\0\4\167\1\172\24\167\1\0\1\167"+
    "\21\0\1\167\6\0\2\167\4\0\13\167\1\173\15\167"+
    "\1\0\1\167\21\0\1\167\6\0\2\167\4\0\16\167"+
    "\1\174\12\167\1\0\1\167\21\0\1\167\6\0\2\167"+
    "\4\0\5\167\1\175\23\167\1\0\1\167\21\0\1\167"+
    "\6\0\2\167\4\0\22\167\1\176\6\167\1\0\1\167"+
    "\21\0\1\167\6\0\2\167\4\0\13\167\1\177\15\167"+
    "\1\0\1\167\21\0\1\167\6\0\2\167\4\0\15\167"+
    "\1\200\13\167\1\0\1\167\21\0\1\167\6\0\2\167"+
    "\4\0\27\167\1\201\1\167\1\0\1\167\21\0\1\167"+
    "\6\0\2\167\4\0\13\167\1\202\15\167\1\0\1\167"+
    "\21\0\1\167\6\0\2\167\4\0\21\167\1\203\7\167"+
    "\1\0\1\167\21\0\1\167\6\0\2\167\4\0\23\167"+
    "\1\204\5\167\1\0\1\167\21\0\1\167\6\0\2\167"+
    "\4\0\10\167\1\205\20\167\1\0\1\167\21\0\1\167"+
    "\6\0\2\167\4\0\13\167\1\206\15\167\1\0\1\167"+
    "\21\0\1\167\6\0\2\167\4\0\15\167\1\207\13\167"+
    "\1\0\1\167\21\0\1\167\6\0\2\167\4\0\20\167"+
    "\1\210\10\167\1\0\1\167\21\0\1\167\6\0\2\167"+
    "\4\0\16\167\1\211\12\167\1\0\1\167\21\0\1\167"+
    "\6\0\2\167\4\0\15\167\1\212\13\167\1\0\1\167"+
    "\21\0\1\167\6\0\2\167\4\0\26\167\1\213\2\167"+
    "\1\0\1\167\21\0\1\167\6\0\2\167\4\0\23\167"+
    "\1\214\5\167\1\0\1\167\21\0\1\167\6\0\2\167"+
    "\4\0\17\167\1\215\11\167\1\0\1\167\21\0\1\167"+
    "\6\0\2\167\4\0\22\167\1\216\6\167\1\0\1\167"+
    "\21\0\1\167\6\0\2\167\4\0\17\167\1\217\11\167"+
    "\1\0\1\167\21\0\1\167\6\0\2\167\4\0\15\167"+
    "\1\220\13\167\1\0\1\167\21\0\1\167\6\0\2\167"+
    "\4\0\4\167\1\221\24\167\1\0\1\167\21\0\1\167"+
    "\6\0\2\167\4\0\27\167\1\222\1\167\1\0\1\167"+
    "\21\0\1\167\6\0\2\167\4\0\11\167\1\223\17\167"+
    "\1\0\1\167\21\0\1\167\6\0\2\167\4\0\2\167"+
    "\1\224\26\167\1\0\1\167\21\0\1\167\6\0\2\167"+
    "\4\0\22\167\1\225\6\167\1\0\1\167\21\0\1\167"+
    "\6\0\2\167\4\0\3\167\1\226\11\167\1\227\13\167"+
    "\1\0\1\167\21\0\1\167\6\0\2\167\4\0\13\167"+
    "\1\230\15\167\1\0\1\167\21\0\1\167\6\0\2\167"+
    "\4\0\20\167\1\231\10\167\1\0\1\167\21\0\1\167"+
    "\6\0\2\167\4\0\1\167\1\232\27\167\1\0\1\167"+
    "\21\0\1\167\6\0\2\167\4\0\11\167\1\233\17\167"+
    "\1\0\1\167\21\0\1\167\6\0\2\167\4\0\1\167"+
    "\1\234\21\167\1\235\5\167\1\0\1\167\21\0\1\167"+
    "\6\0\2\167\4\0\11\167\1\236\17\167\1\0\1\167"+
    "\21\0\1\167\6\0\2\167\4\0\15\167\1\237\13\167"+
    "\1\0\1\167\21\0\1\167\6\0\2\167\4\0\20\167"+
    "\1\240\10\167\1\0\1\167\21\0\1\167\6\0\2\167"+
    "\4\0\5\167\1\241\23\167\1\0\1\167\21\0\1\167"+
    "\6\0\2\167\4\0\5\167\1\242\3\167\1\243\17\167"+
    "\1\0\1\167\21\0\1\167\6\0\2\167\4\0\11\167"+
    "\1\244\17\167\1\0\1\167\21\0\1\167\6\0\2\167"+
    "\4\0\1\167\1\245\27\167\1\0\1\167\21\0\1\246"+
    "\51\0\11\163\1\247\57\163\17\0\1\164\21\0\1\74"+
    "\46\0\1\166\70\0\1\250\6\0\2\250\4\0\31\250"+
    "\1\0\1\250\21\0\1\250\6\0\2\250\4\0\7\250"+
    "\1\251\21\250\1\0\1\250\21\0\1\250\6\0\2\250"+
    "\4\0\20\250\1\252\10\250\1\0\1\250\21\0\1\250"+
    "\6\0\2\250\4\0\1\250\1\253\27\250\1\0\1\250"+
    "\21\0\1\250\6\0\2\250\4\0\13\250\1\254\15\250"+
    "\1\0\1\250\21\0\1\250\6\0\2\250\4\0\1\250"+
    "\1\255\27\250\1\0\1\250\21\0\1\250\6\0\2\250"+
    "\4\0\5\250\1\256\23\250\1\0\1\250\21\0\1\250"+
    "\6\0\2\250\4\0\13\250\1\257\15\250\1\0\1\250"+
    "\21\0\1\250\6\0\2\250\4\0\21\250\1\260\1\261"+
    "\6\250\1\0\1\250\21\0\1\250\6\0\2\250\4\0"+
    "\21\250\1\262\7\250\1\0\1\250\21\0\1\250\6\0"+
    "\2\250\4\0\5\250\1\263\23\250\1\0\1\250\21\0"+
    "\1\250\6\0\2\250\4\0\5\250\1\264\23\250\1\0"+
    "\1\250\21\0\1\250\6\0\2\250\4\0\14\250\1\265"+
    "\14\250\1\0\1\250\21\0\1\250\6\0\2\250\4\0"+
    "\5\250\1\266\23\250\1\0\1\250\21\0\1\250\6\0"+
    "\2\250\4\0\21\250\1\267\7\250\1\0\1\250\21\0"+
    "\1\250\6\0\2\250\4\0\15\250\1\270\13\250\1\0"+
    "\1\250\21\0\1\250\6\0\2\250\4\0\14\250\1\271"+
    "\14\250\1\0\1\250\21\0\1\250\6\0\2\250\4\0"+
    "\3\250\1\272\25\250\1\0\1\250\21\0\1\250\6\0"+
    "\2\250\4\0\20\250\1\273\10\250\1\0\1\250\21\0"+
    "\1\250\6\0\2\250\4\0\16\250\1\274\12\250\1\0"+
    "\1\250\21\0\1\250\6\0\2\250\4\0\5\250\1\275"+
    "\23\250\1\0\1\250\21\0\1\250\6\0\2\250\4\0"+
    "\17\250\1\276\11\250\1\0\1\250\21\0\1\250\6\0"+
    "\2\250\4\0\23\250\1\277\5\250\1\0\1\250\21\0"+
    "\1\250\6\0\2\250\4\0\11\250\1\300\17\250\1\0"+
    "\1\250\21\0\1\250\6\0\2\250\4\0\1\250\1\301"+
    "\27\250\1\0\1\250\21\0\1\250\6\0\2\250\4\0"+
    "\24\250\1\302\4\250\1\0\1\250\21\0\1\250\6\0"+
    "\2\250\4\0\13\250\1\303\15\250\1\0\1\250\21\0"+
    "\1\250\6\0\2\250\4\0\23\250\1\304\5\250\1\0"+
    "\1\250\21\0\1\250\6\0\2\250\4\0\16\250\1\305"+
    "\12\250\1\0\1\250\21\0\1\250\6\0\2\250\4\0"+
    "\4\250\1\306\24\250\1\0\1\250\21\0\1\250\6\0"+
    "\2\250\4\0\11\250\1\307\17\250\1\0\1\250\21\0"+
    "\1\250\6\0\2\250\4\0\11\250\1\310\11\250\1\311"+
    "\5\250\1\0\1\250\21\0\1\250\6\0\2\250\4\0"+
    "\2\250\1\312\26\250\1\0\1\250\21\0\1\250\6\0"+
    "\2\250\4\0\21\250\1\313\7\250\1\0\1\250\21\0"+
    "\1\250\6\0\2\250\4\0\15\250\1\314\13\250\1\0"+
    "\1\250\21\0\1\250\6\0\2\250\4\0\5\250\1\315"+
    "\23\250\1\0\1\250\21\0\1\250\6\0\2\250\4\0"+
    "\26\250\1\316\2\250\1\0\1\250\21\0\1\250\6\0"+
    "\2\250\4\0\22\250\1\317\6\250\1\0\1\250\21\0"+
    "\1\250\6\0\2\250\4\0\25\250\1\320\3\250\1\0"+
    "\1\250\21\0\1\250\6\0\2\250\4\0\12\250\1\321"+
    "\16\250\1\0\1\250\21\0\1\250\6\0\2\250\4\0"+
    "\13\250\1\322\15\250\1\0\1\250\21\0\1\250\6\0"+
    "\2\250\4\0\20\250\1\323\10\250\1\0\1\250\21\0"+
    "\1\246\21\0\1\74\27\0\11\163\1\247\4\163\1\324"+
    "\52\163\17\0\1\325\6\0\2\325\4\0\31\325\1\0"+
    "\1\325\21\0\1\325\6\0\2\325\4\0\14\325\1\326"+
    "\14\325\1\0\1\325\21\0\1\325\6\0\2\325\4\0"+
    "\5\325\1\327\23\325\1\0\1\325\21\0\1\325\6\0"+
    "\2\325\4\0\15\325\1\330\13\325\1\0\1\325\21\0"+
    "\1\325\6\0\2\325\4\0\12\325\1\331\16\325\1\0"+
    "\1\325\21\0\1\325\6\0\2\325\4\0\21\325\1\332"+
    "\7\325\1\0\1\325\21\0\1\325\6\0\2\325\4\0"+
    "\3\325\1\333\25\325\1\0\1\325\21\0\1\325\6\0"+
    "\2\325\4\0\22\325\1\334\6\325\1\0\1\325\21\0"+
    "\1\325\6\0\2\325\4\0\11\325\1\335\6\325\1\336"+
    "\10\325\1\0\1\325\21\0\1\325\6\0\2\325\4\0"+
    "\7\325\1\337\12\325\1\340\6\325\1\0\1\325\21\0"+
    "\1\325\6\0\2\325\4\0\20\325\1\341\10\325\1\0"+
    "\1\325\21\0\1\325\6\0\2\325\4\0\5\325\1\342"+
    "\23\325\1\0\1\325\21\0\1\325\6\0\2\325\4\0"+
    "\5\325\1\343\23\325\1\0\1\325\21\0\1\325\6\0"+
    "\2\325\4\0\22\325\1\344\6\325\1\0\1\325\21\0"+
    "\1\325\6\0\2\325\4\0\21\325\1\345\7\325\1\0"+
    "\1\325\21\0\1\325\6\0\2\325\4\0\20\325\1\346"+
    "\10\325\1\0\1\325\21\0\1\325\6\0\2\325\4\0"+
    "\20\325\1\347\10\325\1\0\1\325\21\0\1\325\6\0"+
    "\2\325\4\0\11\325\1\350\17\325\1\0\1\325\21\0"+
    "\1\325\6\0\2\325\4\0\22\325\1\351\6\325\1\0"+
    "\1\325\21\0\1\325\6\0\2\325\4\0\6\325\1\352"+
    "\22\325\1\0\1\325\21\0\1\325\6\0\2\325\4\0"+
    "\2\325\1\353\26\325\1\0\1\325\21\0\1\325\6\0"+
    "\2\325\4\0\1\325\1\354\27\325\1\0\1\325\21\0"+
    "\1\325\6\0\2\325\4\0\11\325\1\355\17\325\1\0"+
    "\1\325\21\0\1\325\6\0\2\325\4\0\20\325\1\356"+
    "\10\325\1\0\1\325\21\0\1\325\6\0\2\325\4\0"+
    "\15\325\1\357\13\325\1\0\1\325\21\0\1\325\6\0"+
    "\2\325\4\0\4\325\1\360\24\325\1\0\1\325\21\0"+
    "\1\325\6\0\2\325\4\0\15\325\1\361\13\325\1\0"+
    "\1\325\21\0\1\325\6\0\2\325\4\0\3\325\1\362"+
    "\25\325\1\0\1\325\21\0\1\325\6\0\2\325\4\0"+
    "\16\325\1\363\12\325\1\0\1\325\21\0\1\325\6\0"+
    "\2\325\4\0\21\325\1\364\7\325\1\0\1\325\21\0"+
    "\1\325\6\0\2\325\4\0\5\325\1\365\23\325\1\0"+
    "\1\325\21\0\1\325\6\0\2\325\4\0\21\325\1\366"+
    "\7\325\1\0\1\325\21\0\1\325\6\0\2\325\4\0"+
    "\5\325\1\367\23\325\1\0\1\325\21\0\1\325\6\0"+
    "\2\325\4\0\21\325\1\370\7\325\1\0\1\325\21\0"+
    "\1\371\6\0\2\371\4\0\31\371\1\0\1\371\21\0"+
    "\1\371\6\0\2\371\4\0\1\371\1\372\27\371\1\0"+
    "\1\371\21\0\1\371\6\0\2\371\4\0\21\371\1\373"+
    "\7\371\1\0\1\371\21\0\1\371\6\0\2\371\4\0"+
    "\3\371\1\374\25\371\1\0\1\371\21\0\1\371\6\0"+
    "\2\371\4\0\16\371\1\375\12\371\1\0\1\371\21\0"+
    "\1\371\6\0\2\371\4\0\20\371\1\376\10\371\1\0"+
    "\1\371\21\0\1\371\6\0\2\371\4\0\15\371\1\377"+
    "\13\371\1\0\1\371\21\0\1\371\6\0\2\371\4\0"+
    "\1\371\1\u0100\27\371\1\0\1\371\21\0\1\371\6\0"+
    "\2\371\4\0\1\371\1\u0101\27\371\1\0\1\371\21\0"+
    "\1\371\6\0\2\371\4\0\5\371\1\u0102\23\371\1\0"+
    "\1\371\21\0\1\371\6\0\2\371\4\0\27\371\1\u0103"+
    "\1\371\1\0\1\371\21\0\1\371\6\0\2\371\4\0"+
    "\11\371\1\u0104\17\371\1\0\1\371\21\0\1\371\6\0"+
    "\2\371\4\0\22\371\1\u0105\6\371\1\0\1\371\21\0"+
    "\1\371\6\0\2\371\4\0\15\371\1\u0106\13\371\1\0"+
    "\1\371\21\0\1\371\6\0\2\371\4\0\15\371\1\u0107"+
    "\13\371\1\0\1\371\21\0\1\371\6\0\2\371\4\0"+
    "\5\371\1\u0108\23\371\1\0\1\371\21\0\1\371\6\0"+
    "\2\371\4\0\11\371\1\u0109\17\371\1\0\1\371\21\0"+
    "\1\371\6\0\2\371\4\0\13\371\1\u010a\15\371\1\0"+
    "\1\371\21\0\1\371\6\0\2\371\4\0\22\371\1\u010b"+
    "\6\371\1\0\1\371\21\0\1\371\6\0\2\371\4\0"+
    "\3\371\1\u010c\25\371\1\0\1\371\21\0\1\371\6\0"+
    "\2\371\4\0\15\371\1\u010d\13\371\1\0\1\371\21\0"+
    "\1\371\6\0\2\371\4\0\4\371\1\u010e\24\371\1\0"+
    "\1\371\21\0\1\371\6\0\2\371\4\0\11\371\1\u010f"+
    "\17\371\1\0\1\371\21\0\1\371\6\0\2\371\4\0"+
    "\7\371\1\u0110\21\371\1\0\1\371\21\0\1\371\6\0"+
    "\2\371\4\0\22\371\1\u0111\6\371\1\0\1\371\21\0"+
    "\1\371\6\0\2\371\4\0\6\371\1\u0112\22\371\1\0"+
    "\1\371\21\0\1\371\6\0\2\371\4\0\4\371\1\u0113"+
    "\24\371\1\0\1\371\21\0\1\u0114\6\0\2\u0114\4\0"+
    "\31\u0114\1\0\1\u0114\21\0\1\u0114\6\0\2\u0114\4\0"+
    "\21\u0114\1\u0115\7\u0114\1\0\1\u0114\21\0\1\u0114\6\0"+
    "\2\u0114\4\0\5\u0114\1\u0116\23\u0114\1\0\1\u0114\21\0"+
    "\1\u0114\6\0\2\u0114\4\0\4\u0114\1\u0117\24\u0114\1\0"+
    "\1\u0114\21\0\1\u0114\6\0\2\u0114\4\0\23\u0114\1\u0118"+
    "\5\u0114\1\0\1\u0114\21\0\1\u0114\6\0\2\u0114\4\0"+
    "\23\u0114\1\u0119\5\u0114\1\0\1\u0114\21\0\1\u0114\6\0"+
    "\2\u0114\4\0\3\u0114\1\u011a\25\u0114\1\0\1\u0114\21\0"+
    "\1\u0114\6\0\2\u0114\4\0\22\u0114\1\u011b\6\u0114\1\0"+
    "\1\u0114\21\0\1\u0114\6\0\2\u0114\4\0\16\u0114\1\u011c"+
    "\12\u0114\1\0\1\u0114\21\0\1\u0114\6\0\2\u0114\4\0"+
    "\1\u0114\1\u011d\27\u0114\1\0\1\u0114\21\0\1\u0114\6\0"+
    "\2\u0114\4\0\7\u0114\1\u011e\21\u0114\1\0\1\u0114\21\0"+
    "\1\u0114\6\0\2\u0114\4\0\21\u0114\1\u011f\7\u0114\1\0"+
    "\1\u0114\21\0\1\u0114\6\0\2\u0114\4\0\5\u0114\1\u0120"+
    "\23\u0114\1\0\1\u0114\21\0\1\u0114\6\0\2\u0114\4\0"+
    "\5\u0114\1\u0121\23\u0114\1\0\1\u0114\21\0\1\u0114\6\0"+
    "\2\u0114\4\0\5\u0114\1\u0122\23\u0114\1\0\1\u0114\21\0"+
    "\1\u0114\6\0\2\u0114\4\0\21\u0114\1\u0123\7\u0114\1\0"+
    "\1\u0114\21\0\1\u0114\6\0\2\u0114\4\0\21\u0114\1\u0124"+
    "\7\u0114\1\0\1\u0114\21\0\1\u0114\6\0\2\u0114\4\0"+
    "\22\u0114\1\u0125\6\u0114\1\0\1\u0114\21\0\1\u0114\6\0"+
    "\2\u0114\4\0\5\u0114\1\u0126\23\u0114\1\0\1\u0114\21\0"+
    "\1\u0127\6\0\2\u0127\4\0\31\u0127\1\0\1\u0127\21\0"+
    "\1\u0127\6\0\2\u0127\4\0\5\u0127\1\u0128\23\u0127\1\0"+
    "\1\u0127\21\0\1\u0127\6\0\2\u0127\4\0\3\u0127\1\u0129"+
    "\25\u0127\1\0\1\u0127\21\0\1\u0127\6\0\2\u0127\4\0"+
    "\5\u0127\1\u012a\23\u0127\1\0\1\u0127\21\0\1\u0127\6\0"+
    "\2\u0127\4\0\22\u0127\1\u012b\6\u0127\1\0\1\u0127\21\0"+
    "\1\u0127\6\0\2\u0127\4\0\5\u0127\1\u012c\23\u0127\1\0"+
    "\1\u0127\21\0\1\u0127\6\0\2\u0127\4\0\15\u0127\1\u012d"+
    "\13\u0127\1\0\1\u0127\21\0\1\u0127\6\0\2\u0127\4\0"+
    "\13\u0127\1\u012e\15\u0127\1\0\1\u0127\21\0\1\u0127\6\0"+
    "\2\u0127\4\0\20\u0127\1\u012f\10\u0127\1\0\1\u0127\21\0"+
    "\1\u0127\6\0\2\u0127\4\0\27\u0127\1\u0130\1\u0127\1\0"+
    "\1\u0127\21\0\1\u0127\6\0\2\u0127\4\0\20\u0127\1\u0131"+
    "\10\u0127\1\0\1\u0127\21\0\1\u0132\6\0\2\u0132\4\0"+
    "\31\u0132\1\0\1\u0132\21\0\1\u0132\6\0\2\u0132\4\0"+
    "\22\u0132\1\u0133\6\u0132\1\0\1\u0132\21\0\1\u0132\6\0"+
    "\2\u0132\4\0\3\u0132\1\u0134\25\u0132\1\0\1\u0132\21\0"+
    "\1\u0135\6\0\2\u0135\4\0\31\u0135\1\0\1\u0135\21\0"+
    "\1\u0135\6\0\2\u0135\4\0\16\u0135\1\u0136\12\u0135\1\0"+
    "\1\u0135\21\0\1\u0135\6\0\2\u0135\4\0\1\u0135\1\u0137"+
    "\27\u0135\1\0\1\u0135\21\0\1\u0138\6\0\2\u0138\4\0"+
    "\31\u0138\1\0\1\u0138\21\0\1\u0138\6\0\2\u0138\4\0"+
    "\20\u0138\1\u0139\10\u0138\1\0\1\u0138\21\0\1\u0138\6\0"+
    "\2\u0138\4\0\13\u0138\1\u013a\15\u0138\1\0\1\u0138\21\0"+
    "\1\u013b\6\0\2\u013b\4\0\31\u013b\1\0\1\u013b\21\0"+
    "\1\u013b\6\0\2\u013b\4\0\13\u013b\1\u013c\15\u013b\1\0"+
    "\1\u013b\21\0\1\u013d\6\0\2\u013d\4\0\31\u013d\1\0"+
    "\1\u013d\21\0\1\u013e\6\0\2\u013e\4\0\31\u013e\1\0"+
    "\1\u013e\21\0\1\u013f\6\0\2\u013f\4\0\31\u013f\1\0"+
    "\1\u013f\21\0\1\u0140\6\0\2\u0140\4\0\31\u0140\1\0"+
    "\1\u0140\21\0\1\u0141\6\0\2\u0141\4\0\31\u0141\1\0"+
    "\1\u0141\21\0\1\u0142\6\0\2\u0142\4\0\31\u0142\1\0"+
    "\1\u0142\21\0\1\u0143\6\0\2\u0143\4\0\31\u0143\1\0"+
    "\1\u0143\21\0\1\u0144\6\0\2\u0144\4\0\31\u0144\1\0"+
    "\1\u0144\21\0\1\u0145\6\0\2\u0145\4\0\31\u0145\1\0"+
    "\1\u0145\21\0\1\u0146\6\0\2\u0146\4\0\31\u0146\1\0"+
    "\1\u0146\21\0\1\u0147\6\0\2\u0147\4\0\31\u0147\1\0"+
    "\1\u0147\21\0\1\u0148\6\0\2\u0148\4\0\31\u0148\1\0"+
    "\1\u0148\21\0\1\u0149\6\0\2\u0149\4\0\31\u0149\1\0"+
    "\1\u0149\21\0\1\u014a\6\0\2\u014a\4\0\31\u014a\1\0"+
    "\1\u014a\21\0\1\u014b\6\0\2\u014b\4\0\31\u014b\1\0"+
    "\1\u014b\21\0\1\u014c\6\0\2\u014c\4\0\31\u014c\1\0"+
    "\1\u014c\21\0\1\u014d\6\0\2\u014d\4\0\31\u014d\1\0"+
    "\1\u014d\21\0\1\u014e\6\0\2\u014e\4\0\31\u014e\1\0"+
    "\1\u014e\21\0\1\u014f\6\0\2\u014f\4\0\31\u014f\1\0"+
    "\1\u014f\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14364];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\2\11\7\1\2\11"+
    "\3\1\1\11\2\1\1\11\1\1\2\11\21\1\1\11"+
    "\1\1\7\11\1\0\1\11\1\1\1\0\1\11\1\1"+
    "\1\0\5\11\2\1\1\0\54\1\1\11\2\0\1\1"+
    "\1\0\60\1\2\0\54\1\1\11\172\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ERROR;
            }
            // fall through
          case 102: break;
          case 2:
            { /*Ignore*/
            }
            // fall through
          case 103: break;
          case 3:
            { lexeme = yytext();return LOGICNEGATION;
            }
            // fall through
          case 104: break;
          case 4:
            { lexeme = yytext();return MODULE;
            }
            // fall through
          case 105: break;
          case 5:
            { lexeme = yytext();return ARITMETICAND;
            }
            // fall through
          case 106: break;
          case 6:
            { lexeme = yytext();return LPAREN;
            }
            // fall through
          case 107: break;
          case 7:
            { lexeme = yytext();return RPAREN;
            }
            // fall through
          case 108: break;
          case 8:
            { lexeme = yytext();return MULTIPLICATION;
            }
            // fall through
          case 109: break;
          case 9:
            { lexeme = yytext();return SUM;
            }
            // fall through
          case 110: break;
          case 10:
            { lexeme = yytext();return COMMA;
            }
            // fall through
          case 111: break;
          case 11:
            { lexeme = yytext();return SUBSTRACTION;
            }
            // fall through
          case 112: break;
          case 12:
            { lexeme = yytext();return DOT;
            }
            // fall through
          case 113: break;
          case 13:
            { lexeme = yytext();return DIVISION;
            }
            // fall through
          case 114: break;
          case 14:
            { lexeme = yytext();return CONSINTEGER;
            }
            // fall through
          case 115: break;
          case 15:
            { lexeme = yytext();return COLON;
            }
            // fall through
          case 116: break;
          case 16:
            { lexeme = yytext();return SEMICOLON;
            }
            // fall through
          case 117: break;
          case 17:
            { lexeme = yytext();return ARITMETICLESSTHAN;
            }
            // fall through
          case 118: break;
          case 18:
            { lexeme = yytext();return EQUAL;
            }
            // fall through
          case 119: break;
          case 19:
            { lexeme = yytext();return ARITMETICGREATERTHAN;
            }
            // fall through
          case 120: break;
          case 20:
            { lexeme = yytext();return QUESTIONSIGN;
            }
            // fall through
          case 121: break;
          case 21:
            { lexeme = yytext();return ID;
            }
            // fall through
          case 122: break;
          case 22:
            { lexeme = yytext();return LBRACE;
            }
            // fall through
          case 123: break;
          case 23:
            { lexeme = yytext();return RBRACE;
            }
            // fall through
          case 124: break;
          case 24:
            { lexeme = yytext();return ARITMETICEXOR;
            }
            // fall through
          case 125: break;
          case 25:
            { lexeme = yytext();return LBRACKET;
            }
            // fall through
          case 126: break;
          case 26:
            { lexeme = yytext();return ARITMETICOR;
            }
            // fall through
          case 127: break;
          case 27:
            { lexeme = yytext();return RBRACKET;
            }
            // fall through
          case 128: break;
          case 28:
            { lexeme = yytext();return ARITMETICNEGATION;
            }
            // fall through
          case 129: break;
          case 29:
            { lexeme = yytext();return LOGICDISTINCT;
            }
            // fall through
          case 130: break;
          case 30:
            { lexeme = yytext();return LOGICAND;
            }
            // fall through
          case 131: break;
          case 31:
            { lexeme = yytext();return EXPONENTIATION;
            }
            // fall through
          case 132: break;
          case 32:
            { lexeme = yytext();return MULTIEQUAL;
            }
            // fall through
          case 133: break;
          case 33:
            { lexeme = yytext();return SUMEQUAL;
            }
            // fall through
          case 134: break;
          case 34:
            { lexeme = yytext();return SUBEQUAL;
            }
            // fall through
          case 135: break;
          case 35:
            { lexeme = yytext();return CONSREAL;
            }
            // fall through
          case 136: break;
          case 36:
            { lexeme = yytext();return DIVEQUAL;
            }
            // fall through
          case 137: break;
          case 37:
            { lexeme = yytext();return SHIFTLEFT;
            }
            // fall through
          case 138: break;
          case 38:
            { lexeme = yytext();return ARITMETICLESSEQUALTHAN;
            }
            // fall through
          case 139: break;
          case 39:
            { lexeme = yytext();return ARITMETICEQUAL;
            }
            // fall through
          case 140: break;
          case 40:
            { lexeme = yytext();return ARITMETICGREATEREQUALTHAN;
            }
            // fall through
          case 141: break;
          case 41:
            { lexeme = yytext();return SHIFTRIGHT;
            }
            // fall through
          case 142: break;
          case 42:
            { lexeme = yytext();return AS;
            }
            // fall through
          case 143: break;
          case 43:
            { lexeme = yytext();return DO;
            }
            // fall through
          case 144: break;
          case 44:
            { lexeme = yytext();return IF;
            }
            // fall through
          case 145: break;
          case 45:
            { lexeme = yytext();return LOGICOR;
            }
            // fall through
          case 146: break;
          case 46:
            { lexeme = yytext();return CONSSCIENT;
            }
            // fall through
          case 147: break;
          case 47:
            { lexeme = yytext();return SINGLECOMMENT;
            }
            // fall through
          case 148: break;
          case 48:
            { lexeme = yytext();return FOR;
            }
            // fall through
          case 149: break;
          case 49:
            { lexeme = yytext();return HEX;
            }
            // fall through
          case 150: break;
          case 50:
            { lexeme = yytext();return INT;
            }
            // fall through
          case 151: break;
          case 51:
            { lexeme = yytext();return VAR;
            }
            // fall through
          case 152: break;
          case 52:
            { lexeme = yytext();return WEI;
            }
            // fall through
          case 153: break;
          case 53:
            { lexeme = yytext();return BOOL;
            }
            // fall through
          case 154: break;
          case 54:
            { lexeme = yytext();return BYTE;
            }
            // fall through
          case 155: break;
          case 55:
            { lexeme = yytext();return CALL;
            }
            // fall through
          case 156: break;
          case 56:
            { lexeme = yytext();return DAYS;
            }
            // fall through
          case 157: break;
          case 57:
            { lexeme = yytext();return ELSE;
            }
            // fall through
          case 158: break;
          case 58:
            { lexeme = yytext();return ENUM;
            }
            // fall through
          case 159: break;
          case 59:
            { lexeme = yytext();return FROM;
            }
            // fall through
          case 160: break;
          case 60:
            { lexeme = yytext();return SEND;
            }
            // fall through
          case 161: break;
          case 61:
            { lexeme = yytext();return THIS;
            }
            // fall through
          case 162: break;
          case 62:
            { lexeme = yytext();return TRUE;
            }
            // fall through
          case 163: break;
          case 63:
            { lexeme = yytext();return UINT;
            }
            // fall through
          case 164: break;
          case 64:
            { lexeme = yytext();return VIEW;
            }
            // fall through
          case 165: break;
          case 65:
            { lexeme = yytext();return MULTICOMMENT;
            }
            // fall through
          case 166: break;
          case 66:
            { lexeme = yytext();return BREAK;
            }
            // fall through
          case 167: break;
          case 67:
            { lexeme = yytext();return BYTES;
            }
            // fall through
          case 168: break;
          case 68:
            { lexeme = yytext();return ETHER;
            }
            // fall through
          case 169: break;
          case 69:
            { lexeme = yytext();return FALSE;
            }
            // fall through
          case 170: break;
          case 70:
            { lexeme = yytext();return HOURS;
            }
            // fall through
          case 171: break;
          case 71:
            { lexeme = yytext();return SZABO;
            }
            // fall through
          case 172: break;
          case 72:
            { lexeme = yytext();return WEEKS;
            }
            // fall through
          case 173: break;
          case 73:
            { lexeme = yytext();return WHILE;
            }
            // fall through
          case 174: break;
          case 74:
            { lexeme = yytext();return YEARS;
            }
            // fall through
          case 175: break;
          case 75:
            { lexeme = yytext();return PRAGMA;
            }
            // fall through
          case 176: break;
          case 76:
            { lexeme = yytext();return DELETE;
            }
            // fall through
          case 177: break;
          case 77:
            { lexeme = yytext();return FINNEY;
            }
            // fall through
          case 178: break;
          case 78:
            { lexeme = yytext();return IMPORT;
            }
            // fall through
          case 179: break;
          case 79:
            { lexeme = yytext();return PUBLIC;
            }
            // fall through
          case 180: break;
          case 80:
            { lexeme = yytext();return RETURN;
            }
            // fall through
          case 181: break;
          case 81:
            { lexeme = yytext();return STRING;
            }
            // fall through
          case 182: break;
          case 82:
            { lexeme = yytext();return STRUCT;
            }
            // fall through
          case 183: break;
          case 83:
            { lexeme = yytext();return UFIXED;
            }
            // fall through
          case 184: break;
          case 84:
            { lexeme = yytext();return ADDRESS;
            }
            // fall through
          case 185: break;
          case 85:
            { lexeme = yytext();return BALANCE;
            }
            // fall through
          case 186: break;
          case 86:
            { lexeme = yytext();return MAPPING;
            }
            // fall through
          case 187: break;
          case 87:
            { lexeme = yytext();return MINUTES;
            }
            // fall through
          case 188: break;
          case 88:
            { lexeme = yytext();return PAYABLE;
            }
            // fall through
          case 189: break;
          case 89:
            { lexeme = yytext();return PRIVATE;
            }
            // fall through
          case 190: break;
          case 90:
            { lexeme = yytext();return RETURNS;
            }
            // fall through
          case 191: break;
          case 91:
            { lexeme = yytext();return SECONDS;
            }
            // fall through
          case 192: break;
          case 92:
            { lexeme = yytext();return CALLCODE;
            }
            // fall through
          case 193: break;
          case 93:
            { lexeme = yytext();return CONTINUE;
            }
            // fall through
          case 194: break;
          case 94:
            { lexeme = yytext();return CONTRACT;
            }
            // fall through
          case 195: break;
          case 95:
            { lexeme = yytext();return FUNCTION;
            }
            // fall through
          case 196: break;
          case 96:
            { lexeme = yytext();return INTERNAL;
            }
            // fall through
          case 197: break;
          case 97:
            { lexeme = yytext();return MODIFIER;
            }
            // fall through
          case 198: break;
          case 98:
            { lexeme = yytext();return SOLIDITY;
            }
            // fall through
          case 199: break;
          case 99:
            { lexeme = yytext();return TRANSFER;
            }
            // fall through
          case 200: break;
          case 100:
            { lexeme = yytext();return CONSTRUCTOR;
            }
            // fall through
          case 201: break;
          case 101:
            { lexeme = yytext();return DELEGATECALL;
            }
            // fall through
          case 202: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
