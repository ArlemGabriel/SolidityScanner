package Parser;
import java_cup.runtime.*;

/* -------------------------------- Code -------------------------------- */
parser code
{:
    //Connect to scanner
    
:}


/* -------------------------------- Terminals -------------------------------- */
terminal    PRAGMA, SOLIDITY, CONSREAL;                                               //Head
terminal    SEMICOLON, LBRACKET, RBRACKET, LBRACE, RBRACE, LPAREN, RPAREN, COMMA;     //Grammar symbols
terminal    SEMICOLON, DOT, QUESTIONSIGN, COLON;                                      //Grammar symbols
terminal    BOOL, BYTE, BYTES, ADDRESS, STRING, UFIXED, INTWITHSIGN, INTWITHOUTSIGN;  //Types
terminal    PUBLIC, PRIVATE, PAYABLE, INTERNAL;                                       //Modifiers
terminal    CONTRACT, ENUM, STRUCT, FUNCTION, RETURNS, THIS;                          //Reserved words
terminal    WHILE, FOR, DO, IF, ELSE;                                                 //Control structures
terminal    CONSSTRING, CONSINTEGER, CONSSCIENT, TRUE, FALSE;                         //Values, constants
terminal    LOGICNEGATION, ARITMETICNEGATION, LOGICAND, ARITMETICEXOR, ARITMETICEQUAL;//Expressions
terminal    LOGICDISTINCT, LOGICOR, ARITMETICLESSEQUALTHAN, ARITMETICLESSTHAN;        //Expressions
terminal    ARITMETICGREATEREQUALTHAN, ARITMETICGREATERTHAN, ARITMETICAND, ARITMETICOR;//Expressions
terminal    SUM, SUBSTRACTION, MULTIPLICATION, DIVISION, MODULE, EXPONENTIATION;      //Expressions
terminal    SHIFTRIGHT, SHIFTLEFT, SUMEQUAL, SUBEQUAL, MULTIEQUAL;                    //Expressions
terminal    ID;

/* -------------------------------- Non Terminals -------------------------------- */
non terminal    code, head, body, version;                                                                                     //Head
non terminal    contract, other_contract, contract_block;                                                                      //Contract
non terminal    enums, enum_id, other_enum_id;                                                                                 //Enums
non terminal    variables, type, array_modifier, array_length, variable_modifier;                                              //Variables
non terminal    structures;
non terminal    functions, function_parameters, other_function_parameters, function_modifier, function_return_value;           //Functions
non terminal    function_block, statements, variable_assignment;                                                               //Function block
non terminal    expression, conditional_expression, before_value, after_value, rest_of_expression, operator, value_expression; //Expression
non terminal    function_call, function_calling_params, other_function_calling_param;
non terminal    control_structures, while_statement, for_statement, do_while_statement, if_statement, else_statement;          //Control structures
non terminal    return_statement, return_value, value, id_inside_function, id_inside_function_aux;

/* -------------------------------- Grammar -------------------------------- */
code ::= head body
; 
head ::= PRAGMA SOLIDITY version SEMICOLON
;
version ::= ARITMETICEXOR CONSREAL CONSREAL
            | CONSREAL CONSREAL
;
body ::= contract other_contract 
;
other_contract ::= body | //Empty
;

// *** Contract ***
contract ::= CONTRACT ID LBRACKET contract_block RBRACKET
;
contract_block ::= enums variables structures functions
;

// *** Enums ***
enums ::= ENUM LBRACKET enum_id RBRACKET enums 
        | //Empty
;
enum_id ::= ID other_enum_id 
;
other_enum_id ::= COMMA ID other_enum_id 
                | //Empty
;

// *** Variables ***
variables ::= type array_modifier variable_modifier ID SEMICOLON variables 
            | //Empty
;
type ::= BOOL 
        | BYTE 
        | BYTES 
        | ADDRESS 
        | STRING 
        | UFIXED 
        | INTWITHSIGN 
        | INTWITHOUTSIGN
;
array_modifier ::= LBRACE array_lenght RBRACE | //Empty
;
array_length ::= CONSINTEGER //Easy to modify if it is needed arrays of multiples dimensions
;
variable_modifier ::= PUBLIC 
                | PRIVATE 
                | //Empty
;

// *** Structures ***
structures ::= STRUCT ID LBRACKET variables RBRACKET structures | //Empty
;

// *** Functions ***
// +++ Functions head +++
functions ::= FUNCTION ID LPAREN function_parameters RPAREN function_modifier function_return_value LBRACKET function_block RBRACKET functions 
            | //Empty
;
function_parameters ::= type ID other_function_parameters 
                        | //Empty
;
other_function_parameters ::= COMMA function_parameters 
                            | //Empty
;
function_modifier ::= PAYABLE 
                    | PRIVATE 
                    | PUBLIC 
                    | INTERNAL 
                    | //Empty
;
function_return_value ::= RETURNS LPAREN type ID RPAREN 
                        | //Empty
;
// +++ Functions block +++
function_block ::= variables statements
;
statements ::= variable_assignment statements 
            | expression SEMICOLON statements 
            | control_structures statements 
            | return_statement statements 
            | //Empty
;

// +++ Functions statements +++
// --- Assignment ---
variable_assignment ::= id_inside_function EQUAL expression SEMICOLON
;

// --- Expressions ---
expression ::= LPAREN expression RPAREN conditional_expression rest_of_expression
		| function_call rest_of_expression
                | value_expression after_value  rest_of_expression
                | before_value value_expression rest_of_expression
;

conditional_expression ::= QUESTIONSIGN expression COLON expression
				| //EMPTY
;

before_value ::= /*(++)
                | (--)
                |*/ LOGICNEGATION
                | ARITMETICNEGATION
;

after_value ::= /*(++)
                | (--)
                |*/ //EMPTY
;

rest_of_expression ::= operator expression 				
                    | //Empty
;

operator ::= LOGICAND
            | ARITMETICEXOR
            | ARITMETICEQUAL
            | LOGICDISTINCT
            | LOGICOR
            | ARITMETICLESSEQUALTHAN
            | ARITMETICLESSTHAN
            | ARITMETICGREATEREQUALTHAN
            | ARITMETICGREATERTHAN
            | ARITMETICAND
            | ARITMETICOR
            | SUM
            | SUBSTRACTION
            | MULTIPLICATION
            | DIVISION
            | MODULE
            | EXPONENTIATION
            | SHIFTRIGHT
            | SHIFTLEFT
            | SUMEQUAL
            | SUBEQUAL
            | MULTIEQUAL
;
value_expression ::= value 
                    | id_inside_function
;

// --- Function calling ---
function_call ::= id_inside_function LPAREN function_calling_params RPAREN SEMICOLON
;
function_calling_params ::= id_inside_function other_function_calling_param 
                        | //Empty
;
other_function_calling_param ::= COMMA id_inside_function 
                                | //Empty
;			
// --- Control structures ---
control_structures ::= while_statement 
                        | for_statement 
                        | do_while_statement 
                        | if_statement
;
while_statement ::= WHILE LPAREN expression RPAREN LBRACKET statements RBRACKET
;
for_statement ::= FOR LPAREN variable_assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACKET statements RBRACKET
;
do_while_statement ::= DO LBRACKET statements RBRACKET WHILE LPAREN expression RPAREN
;
if_statement ::= IF LPAREN expression RPAREN LBRACKET statements RBRACKET else_statement
;
else_statement ::= ELSE LBRACKET statements RBRACKET 
                   | //Empty
// --- Return ---
return_statement ::= RETURN return_value SEMICOLON
;
return_value ::= id_inside_function 
                | value
;
value ::= CONSSTRING 
        | CONSINTEGER 
        | CONSSCIENT 
        | TRUE 
        | FALSE
;
// --- Aux id for inside functions context ---
id_inside_function ::= ID id_inside_function_aux 
                    | THIS DOT ID 
;
id_inside_function_aux ::= DOT ID 
                        | //Empty
;
